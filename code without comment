import kotlin.math.PI
import kotlin.math.sqrt


fun main() {
    val squareCabin = SquareCabin(6, 50.0)
    val roundHut = RoundHut(3, 10.0)
    val roundTower = RoundTower(4, 15.5)

    with(squareCabin) {
        println("Square Cabin\n==========")
        println("Capacity : ${capacity}")
        println("Building Material : ${buildingMaterial}")
        println("Floor area: %.2f".format(floorArea()))
    }

    with(roundHut) {
        println("\nRound Hut\n==========")
        println("Building Material : ${buildingMaterial}")
        println("Capacity : ${capacity}")
        println("Floor area: %.2f".format(floorArea()))
        println("Has Room for you? ${hasRoom()}")
        getRoom()
        println("Has Room for Next Person? ${hasRoom()}")
        getRoom()
        println("Carpet Size: %.2f".format(calculateMaxCarpetSize()))
    }

    with(roundTower) {
        println("\nRound Tower\n==========")
        println("Building Material : ${buildingMaterial}")
        println("Capacity : ${capacity}")
        println("Has Room ? ${hasRoom()}")
        println("Floor Area: %.2f".format(floorArea()))
        println("Carpet Size: %.2f".format(calculateMaxCarpetSize()))
    }
}

abstract class Dwelling(private var residents : Int) {

    abstract val buildingMaterial : String
    abstract val capacity : Int

    fun hasRoom() : Boolean {
        return capacity > residents
    }
    abstract fun floorArea() : Double

    fun getRoom() {
        if (capacity > residents) {
            residents++ 
            println("You got a room!")
        } else {
            println("Sorry, at capacity and no room left.")
        }
    }
}

class SquareCabin (residents : Int, 
                   val length : Double) : Dwelling(residents)  {
    override val buildingMaterial  = "Wood"
    override val capacity = 6
    override fun floorArea() : Double {
        return length*length
    }
}

open class RoundHut (val residents : Int, 
                     val radius: Double) : Dwelling(residents) {
    override val buildingMaterial = "Straw"
    override val capacity = 4
    override fun floorArea() : Double {
        return PI * radius * radius
    }

    fun calculateMaxCarpetSize() : Double {
        val diameter = 2 * radius
        return sqrt(diameter * diameter / 2)
    }


}

class RoundTower (residents : Int, radius : Double, 
                  val floors : Int = 2) : RoundHut(residents, radius) {
    override val buildingMaterial = "Stone"
    override val capacity = 4 * floors
    override fun floorArea() : Double {
        return super.floorArea() * floors
    }
}
